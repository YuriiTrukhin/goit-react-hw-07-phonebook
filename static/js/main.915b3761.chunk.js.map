{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","components/Filter/Filter.module.css","components/Alert/Alert.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperation.js","components/Alert/Alert.js","redux/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","filterRender","addContact","name","number","dispatch","contactsActions","axios","post","then","response","data","catch","error","fetchContacts","get","removeContact","id","delete","Alert","contactAdded","CSSTransition","in","timeout","classNames","styles","unmountOnExit","className","alertBox","state","contacts","loading","filter","items","contact","toLowerCase","includes","ContactForm","handleChange","target","setState","value","handleSubmit","event","preventDefault","console","log","props","list","some","setTimeout","this","form","action","onSubmit","label","htmlFor","input","type","placeholder","onChange","inputBtn","Component","mapDispatchToProps","newContact","connect","selectors","ContactList","TransitionGroup","component","map","el","listItem","btn","onClick","toDelete","contactsOperation","box","e","App","onFetchComponents","container","isLoadingContacts","appear","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","createReducer","payload","_","combineReducers","store","configureStore","reducer","contactReducer","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.915b3761.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__38-9L\",\"label\":\"ContactForm_label__qR9T8\",\"input\":\"ContactForm_input__1EGzQ\",\"inputBtn\":\"ContactForm_inputBtn__EsMKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3Vp9H\",\"btn\":\"ContactList_btn__kPPLj\",\"listItem\":\"ContactList_listItem__2Rcv-\",\"enter\":\"ContactList_enter__3aLaz\",\"enterActive\":\"ContactList_enterActive__PEp2_\",\"exit\":\"ContactList_exit__1LbKg\",\"exitActive\":\"ContactList_exitActive__3IfGy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container___eUPQ\",\"title\":\"App_title__1MDTT\",\"appear\":\"App_appear__16qcl\",\"appearActive\":\"App_appearActive__1YRL9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"Filter_box__2yFBo\",\"input\":\"Filter_input__2D5bm\",\"label\":\"Filter_label__2f0-_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alertBox\":\"Alert_alertBox__2Niq0\",\"enter\":\"Alert_enter__1CsB-\",\"enterActive\":\"Alert_enterActive__1YA0w\",\"alertExit\":\"Alert_alertExit__2Zjxi\",\"exitActive\":\"Alert_exitActive__3-m7A\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchError\");\r\n\r\nconst removeContactsRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactsSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactsError = createAction(\"contacts/removeError\");\r\n\r\nconst filterRender = createAction(\"contacts/filterRender\");\r\n\r\nexport default {\r\n  addContactError,\r\n  addContactSuccess,\r\n  addContactRequest,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n  filterRender,\r\n};\r\n","import axios from \"axios\";\r\nimport contactsActions from \"./contactsActions\";\r\n\r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post(\"http://localhost:2000/contacts\", { name, number })\r\n    .then((response) => {\r\n      dispatch(contactsActions.addContactSuccess(response.data));\r\n    })\r\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n  axios\r\n    .get(\"http://localhost:2000/contacts\")\r\n    .then(({ data }) => {\r\n      dispatch(contactsActions.fetchContactsSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(contactsActions.removeContactsRequest());\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(contactsActions.removeContactsSuccess(id));\r\n    })\r\n    .catch((error) => dispatch(contactsActions.removeContactsError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"../Alert/Alert.module.css\";\r\n\r\nconst Alert = ({ contactAdded }) => {\r\n  return (\r\n    <CSSTransition in={contactAdded} timeout={250} classNames={styles} unmountOnExit>\r\n      <div className={styles.alertBox}>\r\n        <p>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\nexport default Alert;\r\n","const getLoading = (state) => state.contacts.loading;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getForm = (state) => state.contacts.items;\r\nconst getContactList = (state) =>\r\n  state.contacts.items.filter((contact) => contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()));\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getLoading, getFilter, getForm, getContactList };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport styles from \"./ContactForm.module.css\";\r\nimport newContact from \"../../redux/contacts/contactsOperation\";\r\n\r\nimport Alert from \"../Alert/Alert\";\r\nimport selectors from \"../../redux/selectors\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\", contactAdded: false };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(this.props.list);\r\n    const rule = this.props.list.some((contact) => contact.name === this.state.name);\r\n    if (rule) {\r\n      this.setState({ contactAdded: true });\r\n      setTimeout(() => this.setState({ contactAdded: false }), 2000);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, contactAdded } = this.state;\r\n    return (\r\n      <>\r\n        <Alert contactAdded={contactAdded} />\r\n\r\n        <div>\r\n          <form className={styles.form} action=\"\" onSubmit={this.handleSubmit}>\r\n            <label className={styles.label} htmlFor=\"name\">\r\n              {\" \"}\r\n              Name\r\n              <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={name}\r\n                placeholder=\"name\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>\r\n            <label className={styles.label} htmlFor=\"number\">\r\n              {\" \"}\r\n              Number\r\n              <input\r\n                className={styles.input}\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                placeholder=\"number\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>\r\n            <input className={styles.inputBtn} type=\"submit\" value=\"Add contuct\" />\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  list: selectors.getForm(state),\r\n});\r\nconst mapDispatchToProps = { addContact: newContact.addContact };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/contacts/contactsOperation\";\nimport selectors from \"../../redux/selectors\";\n\nclass ContactList extends Component {\n  render() {\n    return (\n      <>\n        <TransitionGroup component=\"ul\" className={styles.list}>\n          {this.props.list.map((el) => {\n            return (\n              <CSSTransition key={el.id} classNames={styles} timeout={250}>\n                <li key={el.id} className={styles.listItem}>\n                  {el.name} : {el.number}\n                  <button className={styles.btn} type=\"button\" onClick={() => this.props.toDelete(el.id)}>\n                    Удалить\n                  </button>\n                </li>\n              </CSSTransition>\n            );\n          })}\n        </TransitionGroup>\n      </>\n    );\n  }\n}\nContactList.propTypes = {\n  toDelete: PropTypes.func.isRequired,\n  list: PropTypes.array.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  list: selectors.getContactList(state),\n});\nconst mapDispatchToProps = { toDelete: contactsOperation.removeContact };\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contactsActions\";\nimport selectors from \"../../redux/selectors\";\n\nconst Filter = ({ filterRender, filter }) => (\n  <div className={styles.box}>\n    <label className={styles.label}>Find contacts by name</label>\n    <input className={styles.input} type=\"text\" value={filter} onChange={(e) => filterRender(e.target.value)} />\n  </div>\n);\n\nFilter.propTypes = {\n  filterRender: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\nconst mapStateToProps = (state, props) => ({\n  filter: selectors.getFilter(state),\n});\nconst mapDispatchToProps = { filterRender: contactsActions.filterRender };\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from \"react\";\nimport ContactForm from \"../src/components/ContactForm/ContactForm\";\nimport ContactList from \"../src/components/ContactList/ContactList\";\nimport Filter from \"../src/components/Filter/Filter\";\nimport styles from \"./App.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"./redux/contacts/contactsOperation\";\nimport selectors from \"./redux/selectors\";\n\n// import React, { Component } from \"react\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchComponents();\n  }\n  render() {\n    return (\n      <>\n        <div className={styles.container}>\n          {this.props.isLoadingContacts && <h1>LOADING STUFF ...</h1>}\n          <CSSTransition in={true} appear={true} timeout={5000} classNames={styles}>\n            <h1 className={styles.title}>Phonebook</h1>\n          </CSSTransition>\n          <ContactForm />\n          <h2 className={styles.title}>Contacts</h2>\n          <Filter />\n          <ContactList />\n        </div>\n      </>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: selectors.getLoading(state),\n});\nconst mapDispatchToProps = {\n  onFetchComponents: contactsOperation.fetchContacts,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport contactsActions from \"./contactsActions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst INITIAL_STATE = {\r\n  contacts: [],\r\n  filter: \"\",\r\n};\r\n\r\nconst newContact = (state, action) => [...state, action.payload];\r\nconst removeContact = (state, action) => state.filter((contact) => contact.id !== action.payload);\r\n\r\nconst items = createReducer(INITIAL_STATE.contacts, {\r\n  [contactsActions.addContactSuccess]: newContact,\r\n  [contactsActions.fetchContactsSuccess]: (_, action) => action.payload,\r\n  [contactsActions.removeContactsSuccess]: removeContact,\r\n});\r\n\r\nconst filter = createReducer(INITIAL_STATE.filter, {\r\n  [contactsActions.filterRender]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport contactReducer from \"./contacts/contactsReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nconsole.log(store.getState());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}